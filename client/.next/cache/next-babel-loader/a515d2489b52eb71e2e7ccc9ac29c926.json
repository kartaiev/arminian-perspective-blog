{"ast":null,"code":"import client from \"./client\";\nimport groq from \"groq\"; // const queryAll = groq`*[_type == \"post\"][${offset}...${offset+3}]  | order(publishedAt desc) {\n//   _id,\n//   title,\n//   subtitle,\n//   publishedAt,\n//   slug,\n//   mainImage,\n// }`;\n\nexport const getAllPosts = async ({\n  offset\n}) => {\n  return await client.fetch(groq`*[_type == \"post\"][${offset}...${offset + 3}]  | order(publishedAt desc) {\n  _id,\n  title,\n  subtitle,\n  publishedAt,\n  slug,\n  mainImage,\n}`);\n};\nconst queryBuSlug = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  subtitle,\n  publishedAt,\n  \"name\": author->name,\n  mainImage,\n  \"categories\": categories[]->title,\n  body\n}`;\nexport const getSinglePost = async slug => {\n  return await client.fetch(queryBuSlug, {\n    slug\n  });\n};","map":{"version":3,"sources":["C:/Users/Volodymyr_Kartaiev/WebstormProjects/arminian-perspective-blog/client/lib/api.js"],"names":["client","groq","getAllPosts","offset","fetch","queryBuSlug","getSinglePost","slug"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAsB;AAC/C,SAAO,MAAMH,MAAM,CAACI,KAAP,CAAaH,IAAK,sBAAqBE,MAAO,MACzDA,MAAM,GAAG,CACV;;;;;;;EAFY,CAAb;AAUD,CAXM;AAaP,MAAME,WAAW,GAAGJ,IAAK;;;;;;;;EAAzB;AAUA,OAAO,MAAMK,aAAa,GAAG,MAAOC,IAAP,IAAgB;AAC3C,SAAO,MAAMP,MAAM,CAACI,KAAP,CAAaC,WAAb,EAA0B;AAAEE,IAAAA;AAAF,GAA1B,CAAb;AACD,CAFM","sourcesContent":["import client from \"./client\";\nimport groq from \"groq\";\n\n// const queryAll = groq`*[_type == \"post\"][${offset}...${offset+3}]  | order(publishedAt desc) {\n//   _id,\n//   title,\n//   subtitle,\n//   publishedAt,\n//   slug,\n//   mainImage,\n// }`;\n\nexport const getAllPosts = async ({ offset }) => {\n  return await client.fetch(groq`*[_type == \"post\"][${offset}...${\n    offset + 3\n  }]  | order(publishedAt desc) {\n  _id,\n  title,\n  subtitle,\n  publishedAt,\n  slug,\n  mainImage,\n}`);\n};\n\nconst queryBuSlug = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  subtitle,\n  publishedAt,\n  \"name\": author->name,\n  mainImage,\n  \"categories\": categories[]->title,\n  body\n}`;\n\nexport const getSinglePost = async (slug) => {\n  return await client.fetch(queryBuSlug, { slug });\n};\n"]},"metadata":{},"sourceType":"module"}