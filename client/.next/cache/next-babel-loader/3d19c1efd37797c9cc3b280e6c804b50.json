{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Volodymyr_Kartaiev\\\\WebstormProjects\\\\arminian-perspective-blog\\\\client\\\\components\\\\posts-preview\\\\previews.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useSWRInfinite } from \"swr\";\nimport { fetcher, getKey } from \"../../actions\";\nimport PostCard from \"./PostCard\";\n\nvar previews = function previews() {\n  _s();\n\n  var fetcher = function fetcher(url) {\n    return fetch(url).then(function (res) {\n      return res.json();\n    });\n  };\n\n  var getKey = function getKey(index, previousPageData) {\n    if (previousPageData && !previousPageData.length) return null;\n    return \"/api/posts?offset=\".concat(index);\n  };\n\n  var _useSWRInfinite = useSWRInfinite(getKey, fetcher),\n      paginatedPosts = _useSWRInfinite.data,\n      size = _useSWRInfinite.size,\n      setSize = _useSWRInfinite.setSize;\n\n  if (!paginatedPosts) return \"loading\";\n  console.log(paginatedPosts);\n  return paginatedPosts && paginatedPosts.map(function (_ref) {\n    var _id = _ref._id,\n        title = _ref.title,\n        subtitle = _ref.subtitle,\n        slug = _ref.slug,\n        mainImage = _ref.mainImage,\n        publishedAt = _ref.publishedAt,\n        body = _ref.body;\n    return __jsx(PostCard, {\n      key: _id,\n      title: title,\n      subtitle: subtitle,\n      slug: slug,\n      mainImage: mainImage,\n      publishedAt: publishedAt,\n      body: body,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    });\n  });\n};\n\n_s(previews, \"VYu1+BRtmaeRBDKcP7P7Ahc82lE=\", false, function () {\n  return [useSWRInfinite];\n});\n\nexport default previews;","map":{"version":3,"sources":["C:/Users/Volodymyr_Kartaiev/WebstormProjects/arminian-perspective-blog/client/components/posts-preview/previews.js"],"names":["React","useSWRInfinite","fetcher","getKey","PostCard","previews","url","fetch","then","res","json","index","previousPageData","length","paginatedPosts","data","size","setSize","console","log","map","_id","title","subtitle","slug","mainImage","publishedAt","body"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,KAA/B;AACA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,eAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA;;AACrB,MAAMH,OAAO,GAAG,SAAVA,OAAU,CAACI,GAAD;AAAA,WAASC,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgB,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KAAhB,CAAT;AAAA,GAAhB;;AAEA,MAAMP,MAAM,GAAG,SAATA,MAAS,CAACQ,KAAD,EAAQC,gBAAR,EAA6B;AAC1C,QAAIA,gBAAgB,IAAI,CAACA,gBAAgB,CAACC,MAA1C,EAAkD,OAAO,IAAP;AAClD,uCAA4BF,KAA5B;AACD,GAHD;;AAHqB,wBAQ2BV,cAAc,CAC5DE,MAD4D,EAE5DD,OAF4D,CARzC;AAAA,MAQPY,cARO,mBAQbC,IARa;AAAA,MAQSC,IART,mBAQSA,IART;AAAA,MAQeC,OARf,mBAQeA,OARf;;AAarB,MAAI,CAACH,cAAL,EAAqB,OAAO,SAAP;AAErBI,EAAAA,OAAO,CAACC,GAAR,CAAYL,cAAZ;AAEA,SACEA,cAAc,IACdA,cAAc,CAACM,GAAf,CACE;AAAA,QAAGC,GAAH,QAAGA,GAAH;AAAA,QAAQC,KAAR,QAAQA,KAAR;AAAA,QAAeC,QAAf,QAAeA,QAAf;AAAA,QAAyBC,IAAzB,QAAyBA,IAAzB;AAAA,QAA+BC,SAA/B,QAA+BA,SAA/B;AAAA,QAA0CC,WAA1C,QAA0CA,WAA1C;AAAA,QAAuDC,IAAvD,QAAuDA,IAAvD;AAAA,WACE,MAAC,QAAD;AACE,MAAA,GAAG,EAAEN,GADP;AAEE,MAAA,KAAK,EAAEC,KAFT;AAGE,MAAA,QAAQ,EAAEC,QAHZ;AAIE,MAAA,IAAI,EAAEC,IAJR;AAKE,MAAA,SAAS,EAAEC,SALb;AAME,MAAA,WAAW,EAAEC,WANf;AAOE,MAAA,IAAI,EAAEC,IAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAAA,GADF,CAFF;AAgBD,CAjCD;;GAAMtB,Q;UAQ4CJ,c;;;AA2BlD,eAAeI,QAAf","sourcesContent":["import React from \"react\";\nimport { useSWRInfinite } from \"swr\";\nimport { fetcher, getKey } from \"../../actions\";\nimport PostCard from \"./PostCard\";\n\nconst previews = () => {\n  const fetcher = (url) => fetch(url).then((res) => res.json());\n\n  const getKey = (index, previousPageData) => {\n    if (previousPageData && !previousPageData.length) return null;\n    return `/api/posts?offset=${index}`;\n  };\n\n  const { data: paginatedPosts, size, setSize } = useSWRInfinite(\n    getKey,\n    fetcher\n  );\n\n  if (!paginatedPosts) return \"loading\";\n\n  console.log(paginatedPosts);\n\n  return (\n    paginatedPosts &&\n    paginatedPosts.map(\n      ({ _id, title, subtitle, slug, mainImage, publishedAt, body }) => (\n        <PostCard\n          key={_id}\n          title={title}\n          subtitle={subtitle}\n          slug={slug}\n          mainImage={mainImage}\n          publishedAt={publishedAt}\n          body={body}\n        />\n      )\n    )\n  );\n};\n\nexport default previews;\n"]},"metadata":{},"sourceType":"module"}