{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Volodymyr_Kartaiev\\\\WebstormProjects\\\\blog\\\\arminian-perspective-blog\\\\client\\\\components\\\\posts-preview\\\\Previews.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from \"react\";\nimport PostCard from \"./PostCard\";\nimport { useGetPosts } from \"../../actions\";\nimport { PAGE_SIZE } from \"../../lib/vars\";\nimport IconsBtn from \"../shared/IconsBtn\";\nimport { BsGrid } from \"react-icons/bs\";\nimport { FiList } from \"react-icons/fi\";\nimport { Skeleton, useColorMode } from \"@chakra-ui/core\";\nimport Box from \"@chakra-ui/core/dist/Box\";\nimport { borderColor, color } from \"../../customTheme\";\nimport Button from \"@chakra-ui/core/dist/Button\";\nimport { downChevron } from \"../../lib/icons\";\nimport { GlobalContext } from \"../../context/global.context\";\n\nvar Previews = function Previews(_ref) {\n  _s();\n\n  var _paginatedPosts$, _paginatedPosts;\n\n  var paginatedPosts = _ref.paginatedPosts,\n      size = _ref.size,\n      setSize = _ref.setSize;\n\n  var _useContext = useContext(GlobalContext),\n      isListView = _useContext.isListView,\n      switchView = _useContext.switchView;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var isEmpty = (paginatedPosts === null || paginatedPosts === void 0 ? void 0 : (_paginatedPosts$ = paginatedPosts[0]) === null || _paginatedPosts$ === void 0 ? void 0 : _paginatedPosts$.length) === 0;\n  var isReachingEnd = isEmpty || paginatedPosts && ((_paginatedPosts = paginatedPosts[paginatedPosts.length - 1]) === null || _paginatedPosts === void 0 ? void 0 : _paginatedPosts.length) < PAGE_SIZE;\n  if (!paginatedPosts) return \"loading\";\n  var previews = paginatedPosts.flat().map(function (p) {\n    p.map(function (p) {\n      return console.log(p.title);\n    }); // (\n    //     <PostCard\n    //       key={_id}\n    //       title={title}\n    //       subtitle={subtitle}\n    //       slug={slug}\n    //       mainImage={mainImage}\n    //       publishedAt={publishedAt}\n    //       body={body}\n    //     />\n    //\n    // )\n  });\n  console.log(previews);\n  var previewClass = isListView ? \"md:mx-16 ip:ml-48\" : \"lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12\";\n  return __jsx(Box, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"view-button-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(IconsBtn, {\n    whileHover: {\n      scale: 1.2\n    },\n    firstIcon: BsGrid,\n    secondIcon: FiList,\n    toggle: switchView,\n    isToggled: isListView,\n    className: \"ease\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  })), __jsx(Skeleton, {\n    isLoaded: paginatedPosts,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    color: color[colorMode],\n    className: \"preview-container \".concat(previewClass),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"hello\")), __jsx(\"div\", {\n    className: \"preview-button-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    disabled: isReachingEnd,\n    size: \"lg\",\n    rounded: \"full\",\n    onClick: function onClick() {\n      return !isReachingEnd && setSize(size + 1);\n    },\n    variant: \"outline\",\n    borderColor: borderColor[colorMode],\n    _focus: {\n      outline: \"none\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, downChevron(isReachingEnd))));\n};\n\n_s(Previews, \"2DC1btNjrEhb/H0Yf2t/AqCJEp4=\", false, function () {\n  return [useColorMode];\n});\n\n_c = Previews;\nexport default Previews;\n\nvar _c;\n\n$RefreshReg$(_c, \"Previews\");","map":{"version":3,"sources":["C:/Users/Volodymyr_Kartaiev/WebstormProjects/blog/arminian-perspective-blog/client/components/posts-preview/Previews.js"],"names":["React","useContext","PostCard","useGetPosts","PAGE_SIZE","IconsBtn","BsGrid","FiList","Skeleton","useColorMode","Box","borderColor","color","Button","downChevron","GlobalContext","Previews","paginatedPosts","size","setSize","isListView","switchView","colorMode","isEmpty","length","isReachingEnd","previews","flat","map","p","console","log","title","previewClass","scale","outline"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport PostCard from \"./PostCard\";\nimport { useGetPosts } from \"../../actions\";\nimport { PAGE_SIZE } from \"../../lib/vars\";\nimport IconsBtn from \"../shared/IconsBtn\";\nimport { BsGrid } from \"react-icons/bs\";\nimport { FiList } from \"react-icons/fi\";\nimport { Skeleton, useColorMode } from \"@chakra-ui/core\";\nimport Box from \"@chakra-ui/core/dist/Box\";\nimport { borderColor, color } from \"../../customTheme\";\nimport Button from \"@chakra-ui/core/dist/Button\";\nimport { downChevron } from \"../../lib/icons\";\nimport { GlobalContext } from \"../../context/global.context\";\n\nconst Previews = ({ paginatedPosts, size, setSize }) => {\n  const { isListView, switchView } = useContext(GlobalContext);\n\n  const { colorMode } = useColorMode();\n\n  const isEmpty = paginatedPosts?.[0]?.length === 0;\n  const isReachingEnd =\n    isEmpty ||\n    (paginatedPosts &&\n      paginatedPosts[paginatedPosts.length - 1]?.length < PAGE_SIZE);\n\n  if (!paginatedPosts) return \"loading\";\n\n  const previews = paginatedPosts.flat().map((p) => {\n    p.map((p) => console.log(p.title));\n    // (\n    //     <PostCard\n    //       key={_id}\n    //       title={title}\n    //       subtitle={subtitle}\n    //       slug={slug}\n    //       mainImage={mainImage}\n    //       publishedAt={publishedAt}\n    //       body={body}\n    //     />\n    //\n    // )\n  });\n\n  console.log(previews);\n\n  const previewClass = isListView\n    ? \"md:mx-16 ip:ml-48\"\n    : \"lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12\";\n\n  return (\n    <Box>\n      <div className=\"view-button-container\">\n        <IconsBtn\n          whileHover={{ scale: 1.2 }}\n          firstIcon={BsGrid}\n          secondIcon={FiList}\n          toggle={switchView}\n          isToggled={isListView}\n          className=\"ease\"\n        />\n      </div>\n      <Skeleton isLoaded={paginatedPosts}>\n        <Box\n          color={color[colorMode]}\n          className={`preview-container ${previewClass}`}\n        >\n          hello\n          {/*{previews}*/}\n        </Box>\n      </Skeleton>\n      <div className=\"preview-button-container\">\n        <Button\n          disabled={isReachingEnd}\n          size=\"lg\"\n          rounded=\"full\"\n          onClick={() => !isReachingEnd && setSize(size + 1)}\n          variant=\"outline\"\n          borderColor={borderColor[colorMode]}\n          _focus={{ outline: \"none\" }}\n        >\n          {downChevron(isReachingEnd)}\n        </Button>\n      </div>\n    </Box>\n  );\n};\n\nexport default Previews;\n"]},"metadata":{},"sourceType":"module"}