{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport var useWindowSize = function useWindowSize() {\n  _s();\n\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      windowSize = _useState[0],\n      setWindowSize = _useState[1];\n\n  useEffect(function () {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return function () {\n      return window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n};\n\n_s(useWindowSize, \"1VY12JXsoP5DoBuf4niMfMVWsBo=\");","map":{"version":3,"sources":["/Users/earth/WebstormProjects/arminian-perspective-blog/client/hooks/useWindowSize.js"],"names":["useEffect","useState","useWindowSize","width","undefined","height","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA;;AAAA,kBACGD,QAAQ,CAAC;AAC3CE,IAAAA,KAAK,EAAEC,SADoC;AAG3CC,IAAAA,MAAM,EAAED;AAHmC,GAAD,CADX;AAAA,MAC1BE,UAD0B;AAAA,MACdC,aADc;;AAOjCP,EAAAA,SAAS,CAAC,YAAM;AACd;AAEA,aAASQ,YAAT,GAAwB;AACtB;AAEAD,MAAAA,aAAa,CAAC;AACZJ,QAAAA,KAAK,EAAEM,MAAM,CAACC,UADF;AAGZL,QAAAA,MAAM,EAAEI,MAAM,CAACE;AAHH,OAAD,CAAb;AAKD,KAXa,CAad;;;AAEAF,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAfc,CAiBd;;AAEAA,IAAAA,YAAY,GAnBE,CAqBd;;AAEA,WAAO;AAAA,aAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAN;AAAA,KAAP;AACD,GAxBQ,EAwBN,EAxBM,CAAT,CAPiC,CA+BzB;;AAER,SAAOF,UAAP;AACD,CAlCM;;GAAMJ,a","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport const useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n\n    function handleResize() {\n      // Set window width/height to state\n\n      setWindowSize({\n        width: window.innerWidth,\n\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n\n    handleResize();\n\n    // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n};\n"]},"metadata":{},"sourceType":"module"}