{"ast":null,"code":"import client from \"./client\";\nimport groq from \"groq\";\nimport { PAGE_SIZE } from \"./vars\";\n\nconst queryAll = offset => groq`*[_type == \"post\"][${offset}...${offset + PAGE_SIZE}]  | order(_updatedAt desc) {\n  _id,\n  title,\n  subtitle,\n  publishedAt,\n  _createdAt,\n  slug,\n  mainImage,\n}`;\n\nexport const getAllPosts = async offset => {\n  return await client.fetch(queryAll(offset));\n};\nconst queryBySlug = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  subtitle,\n  publishedAt,\n  _createdAt,\n  \"name\": author->name,\n  mainImage,\n  \"categories\": categories[]->title,\n  body\n}`;\nexport const getSinglePost = async slug => {\n  return await client.fetch(queryBySlug, {\n    slug\n  });\n};\nconst queryAllSLugs = groq`*[_type == \"post\"] {slug}`;\nexport const getAllSlugs = async () => {\n  return await client.fetch(queryAllSLugs);\n};","map":{"version":3,"sources":["C:/Users/Volodymyr_Kartaiev/WebstormProjects/blog/arminian-perspective-blog/client/lib/api.js"],"names":["client","groq","PAGE_SIZE","queryAll","offset","getAllPosts","fetch","queryBySlug","getSinglePost","slug","queryAllSLugs","getAllSlugs"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,SAAT,QAA0B,QAA1B;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAYH,IAAK,sBAAqBG,MAAO,MAC5DA,MAAM,GAAGF,SACV;;;;;;;;EAFD;;AAYA,OAAO,MAAMG,WAAW,GAAG,MAAOD,MAAP,IAAkB;AAC3C,SAAO,MAAMJ,MAAM,CAACM,KAAP,CAAaH,QAAQ,CAACC,MAAD,CAArB,CAAb;AACD,CAFM;AAIP,MAAMG,WAAW,GAAGN,IAAK;;;;;;;;;EAAzB;AAWA,OAAO,MAAMO,aAAa,GAAG,MAAOC,IAAP,IAAgB;AAC3C,SAAO,MAAMT,MAAM,CAACM,KAAP,CAAaC,WAAb,EAA0B;AAAEE,IAAAA;AAAF,GAA1B,CAAb;AACD,CAFM;AAIP,MAAMC,aAAa,GAAGT,IAAK,2BAA3B;AAEA,OAAO,MAAMU,WAAW,GAAG,YAAY;AACrC,SAAO,MAAMX,MAAM,CAACM,KAAP,CAAaI,aAAb,CAAb;AACD,CAFM","sourcesContent":["import client from \"./client\";\r\nimport groq from \"groq\";\r\nimport { PAGE_SIZE } from \"./vars\";\r\n\r\nconst queryAll = (offset) => groq`*[_type == \"post\"][${offset}...${\r\n  offset + PAGE_SIZE\r\n}]  | order(_updatedAt desc) {\r\n  _id,\r\n  title,\r\n  subtitle,\r\n  publishedAt,\r\n  _createdAt,\r\n  slug,\r\n  mainImage,\r\n}`;\r\n\r\nexport const getAllPosts = async (offset) => {\r\n  return await client.fetch(queryAll(offset));\r\n};\r\n\r\nconst queryBySlug = groq`*[_type == \"post\" && slug.current == $slug][0]{\r\n  title,\r\n  subtitle,\r\n  publishedAt,\r\n  _createdAt,\r\n  \"name\": author->name,\r\n  mainImage,\r\n  \"categories\": categories[]->title,\r\n  body\r\n}`;\r\n\r\nexport const getSinglePost = async (slug) => {\r\n  return await client.fetch(queryBySlug, { slug });\r\n};\r\n\r\nconst queryAllSLugs = groq`*[_type == \"post\"] {slug}`;\r\n\r\nexport const getAllSlugs = async () => {\r\n  return await client.fetch(queryAllSLugs);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}