{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Volodymyr_Kartaiev\\\\WebstormProjects\\\\arminian-perspective-blog\\\\client\\\\components\\\\posts-preview\\\\GridListBtn.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Tooltip } from \"@chakra-ui/core\";\nimport { motion } from \"framer-motion\";\nimport { useToggle } from \"../../hooks/useToggle\";\nimport { gridIcon, listIcon } from \"../../lib/icons\";\n\nconst GridListBtn = () => {\n  const {\n    isToggled,\n    toggle\n  } = useToggle();\n  return __jsx(motion.button, {\n    whileHover: {\n      scale: 1.2\n    },\n    onClick: toggle,\n    className: \"focus:outline-none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, isToggled ? __jsx(Tooltip, {\n    hasArrow: true,\n    label: \"\\u043E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0437\\u0438\\u0442\\u044C \\u0441\\u0435\\u0442\\u043A\\u043E\\u0439\",\n    placement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, gridIcon) : __jsx(Tooltip, {\n    hasArrow: true,\n    label: \"\\u043E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0437\\u0438\\u0442\\u044C \\u0441\\u043F\\u0438\\u0441\\u043A\\u043E\\u043C\",\n    placement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, listIcon));\n};\n\nexport default GridListBtn;","map":{"version":3,"sources":["C:/Users/Volodymyr_Kartaiev/WebstormProjects/arminian-perspective-blog/client/components/posts-preview/GridListBtn.js"],"names":["React","Tooltip","motion","useToggle","gridIcon","listIcon","GridListBtn","isToggled","toggle","scale"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,iBAAnC;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAwBL,SAAS,EAAvC;AAEA,SACE,MAAC,MAAD,CAAQ,MAAR;AACE,IAAA,UAAU,EAAE;AAAEM,MAAAA,KAAK,EAAE;AAAT,KADd;AAEE,IAAA,OAAO,EAAED,MAFX;AAGE,IAAA,SAAS,EAAC,oBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGD,SAAS,GACR,MAAC,OAAD;AAAS,IAAA,QAAQ,MAAjB;AAAkB,IAAA,KAAK,EAAC,mGAAxB;AAA4C,IAAA,SAAS,EAAC,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QADH,CADQ,GAKR,MAAC,OAAD;AAAS,IAAA,QAAQ,MAAjB;AAAkB,IAAA,KAAK,EAAC,yGAAxB;AAA6C,IAAA,SAAS,EAAC,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,QADH,CAVJ,CADF;AAiBD,CApBD;;AAsBA,eAAeC,WAAf","sourcesContent":["import React from \"react\";\nimport { Tooltip } from \"@chakra-ui/core\";\nimport { motion } from \"framer-motion\";\nimport { useToggle } from \"../../hooks/useToggle\";\nimport { gridIcon, listIcon } from \"../../lib/icons\";\n\nconst GridListBtn = () => {\n  const { isToggled, toggle } = useToggle();\n\n  return (\n    <motion.button\n      whileHover={{ scale: 1.2 }}\n      onClick={toggle}\n      className=\"focus:outline-none\"\n    >\n      {isToggled ? (\n        <Tooltip hasArrow label=\"отобразить сеткой\" placement=\"top\">\n          {gridIcon}\n        </Tooltip>\n      ) : (\n        <Tooltip hasArrow label=\"отобразить списком\" placement=\"top\">\n          {listIcon}\n        </Tooltip>\n      )}\n    </motion.button>\n  );\n};\n\nexport default GridListBtn;\n"]},"metadata":{},"sourceType":"module"}