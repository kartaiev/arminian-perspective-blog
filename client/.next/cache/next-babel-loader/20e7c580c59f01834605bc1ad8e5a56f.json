{"ast":null,"code":"import client from \"./client\";\nimport groq from \"groq\";\nimport { PAGE_SIZE } from \"./vars\";\n\nconst queryAll = offset => groq`*[_type == \"post\"][${offset}...${offset + PAGE_SIZE}]  | order(publishedAt desc) {\n  _id,\n  title,\n  subtitle,\n  publishedAt,\n  _updatedAt,\n  slug,\n  mainImage,\n  \"categories\": categories[]->title,\n}`;\n\nexport const getAllPosts = async offset => {\n  return await client.fetch(queryAll(offset));\n};\n\nconst queryByCategory = (offset, category) => groq`*[${category} in categories][${offset}...${offset + PAGE_SIZE}]  | order(publishedAt desc) {\n  _id,\n  title,\n  subtitle,\n  publishedAt,\n  _updatedAt,\n  slug,\n  mainImage,\n}`;\n\nexport const getPostsByCategory = async (offset, category) => {\n  return await client.fetch(queryByCategory(offset, category));\n};\nconst queryBySlug = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  subtitle,\n  publishedAt,\n  _updatedAt,\n  \"name\": author->name,\n  mainImage,\n  \"categories\": categories[]->title,\n  body\n}`;\nexport const getSinglePost = async slug => {\n  return await client.fetch(queryBySlug, {\n    slug\n  });\n};\nconst queryAllSLugs = groq`*[_type == \"post\"] {slug}`;\nexport const getAllSlugs = async () => {\n  return await client.fetch(queryAllSLugs);\n};","map":{"version":3,"sources":["/Users/earth/WebstormProjects/arminian-perspective-blog/client/lib/api.js"],"names":["client","groq","PAGE_SIZE","queryAll","offset","getAllPosts","fetch","queryByCategory","category","getPostsByCategory","queryBySlug","getSinglePost","slug","queryAllSLugs","getAllSlugs"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,SAAT,QAA0B,QAA1B;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAYH,IAAK,sBAAqBG,MAAO,MAC5DA,MAAM,GAAGF,SACV;;;;;;;;;EAFD;;AAaA,OAAO,MAAMG,WAAW,GAAG,MAAOD,MAAP,IAAkB;AAC3C,SAAO,MAAMJ,MAAM,CAACM,KAAP,CAAaH,QAAQ,CAACC,MAAD,CAArB,CAAb;AACD,CAFM;;AAIP,MAAMG,eAAe,GAAG,CACtBH,MADsB,EAEtBI,QAFsB,KAGnBP,IAAK,KAAIO,QAAS,mBAAkBJ,MAAO,MAC9CA,MAAM,GAAGF,SACV;;;;;;;;EALD;;AAeA,OAAO,MAAMO,kBAAkB,GAAG,OAAOL,MAAP,EAAeI,QAAf,KAA4B;AAC5D,SAAO,MAAMR,MAAM,CAACM,KAAP,CAAaC,eAAe,CAACH,MAAD,EAASI,QAAT,CAA5B,CAAb;AACD,CAFM;AAIP,MAAME,WAAW,GAAGT,IAAK;;;;;;;;;EAAzB;AAWA,OAAO,MAAMU,aAAa,GAAG,MAAOC,IAAP,IAAgB;AAC3C,SAAO,MAAMZ,MAAM,CAACM,KAAP,CAAaI,WAAb,EAA0B;AAAEE,IAAAA;AAAF,GAA1B,CAAb;AACD,CAFM;AAIP,MAAMC,aAAa,GAAGZ,IAAK,2BAA3B;AAEA,OAAO,MAAMa,WAAW,GAAG,YAAY;AACrC,SAAO,MAAMd,MAAM,CAACM,KAAP,CAAaO,aAAb,CAAb;AACD,CAFM","sourcesContent":["import client from \"./client\";\nimport groq from \"groq\";\nimport { PAGE_SIZE } from \"./vars\";\n\nconst queryAll = (offset) => groq`*[_type == \"post\"][${offset}...${\n  offset + PAGE_SIZE\n}]  | order(publishedAt desc) {\n  _id,\n  title,\n  subtitle,\n  publishedAt,\n  _updatedAt,\n  slug,\n  mainImage,\n  \"categories\": categories[]->title,\n}`;\n\nexport const getAllPosts = async (offset) => {\n  return await client.fetch(queryAll(offset));\n};\n\nconst queryByCategory = (\n  offset,\n  category\n) => groq`*[${category} in categories][${offset}...${\n  offset + PAGE_SIZE\n}]  | order(publishedAt desc) {\n  _id,\n  title,\n  subtitle,\n  publishedAt,\n  _updatedAt,\n  slug,\n  mainImage,\n}`;\n\nexport const getPostsByCategory = async (offset, category) => {\n  return await client.fetch(queryByCategory(offset, category));\n};\n\nconst queryBySlug = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  subtitle,\n  publishedAt,\n  _updatedAt,\n  \"name\": author->name,\n  mainImage,\n  \"categories\": categories[]->title,\n  body\n}`;\n\nexport const getSinglePost = async (slug) => {\n  return await client.fetch(queryBySlug, { slug });\n};\n\nconst queryAllSLugs = groq`*[_type == \"post\"] {slug}`;\n\nexport const getAllSlugs = async () => {\n  return await client.fetch(queryAllSLugs);\n};\n"]},"metadata":{},"sourceType":"module"}