{"ast":null,"code":"// import React, { useContext } from \"react\";\n// import PostCard from \"./PostCard\";\n// import { useGetPosts } from \"../../actions\";\n// import { PAGE_SIZE } from \"../../lib/vars\";\n// import IconsBtn from \"../shared/IconsBtn\";\n// import { BsGrid } from \"react-icons/bs\";\n// import { FiList } from \"react-icons/fi\";\n// import { Skeleton, useColorMode } from \"@chakra-ui/core\";\n// import Box from \"@chakra-ui/core/dist/Box\";\n// import { borderColor, color } from \"../../customTheme\";\n// import Button from \"@chakra-ui/core/dist/Button\";\n// import { downChevron } from \"../../lib/icons\";\n// import { GlobalContext } from \"../../context/global.context\";\n//\n//\n//\n// const Previews = ({ posts }) => {\n//   const { isListView, switchView } = useContext(GlobalContext);\n//\n//   const { colorMode } = useColorMode();\n//\n//   const initialData = posts && posts;\n//\n//   const { data: paginatedPosts, size, setSize } = useGetPosts(initialData);\n//\n//   if (!paginatedPosts) return \"loading\";\n//\n//   const isEmpty = paginatedPosts?.length === 0;\n//\n//   const isReachingEnd =\n//     isEmpty ||\n//     (paginatedPosts &&\n//       paginatedPosts[paginatedPosts.length - 1]?.length < PAGE_SIZE);\n//\n//   console.log(size);\n//\n//   const previews = paginatedPosts.map(\n//     ({ _id, title, subtitle, slug, mainImage, publishedAt, body }) =>\n//       slug && (\n//         <PostCard\n//           key={_id}\n//           title={title}\n//           subtitle={subtitle}\n//           slug={slug}\n//           mainImage={mainImage}\n//           publishedAt={publishedAt}\n//           body={body}\n//         />\n//       )\n//   );\n//\n//   const previewClass = isListView\n//     ? \"md:mx-16 ip:ml-48\"\n//     : \"lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12\";\n//\n//   return (\n//     <Box>\n//       <div className=\"view-button-container\">\n//         <IconsBtn\n//           whileHover={{ scale: 1.2 }}\n//           firstIcon={BsGrid}\n//           secondIcon={FiList}\n//           toggle={switchView}\n//           isToggled={isListView}\n//           className=\"ease\"\n//         />\n//       </div>\n//       <Skeleton isLoaded={paginatedPosts}>\n//         <Box\n//           color={color[colorMode]}\n//           className={`preview-container ${previewClass}`}\n//         >\n//           {previews}\n//         </Box>\n//       </Skeleton>\n//       <div className=\"preview-button-container\">\n//         <Button\n//           disabled={isReachingEnd}\n//           size=\"lg\"\n//           rounded=\"full\"\n//           onClick={() => !isReachingEnd && setSize(size + 1)}\n//           variant=\"outline\"\n//           borderColor={borderColor[colorMode]}\n//           _focus={{ outline: \"none\" }}\n//         >\n//           {downChevron(isReachingEnd)}\n//         </Button>\n//       </div>\n//     </Box>\n//   );\n// };\n//\n// export default Previews;","map":{"version":3,"sources":["C:/Users/Volodymyr_Kartaiev/WebstormProjects/blog/arminian-perspective-blog/client/components/posts-preview/Previews.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { useContext } from \"react\";\n// import PostCard from \"./PostCard\";\n// import { useGetPosts } from \"../../actions\";\n// import { PAGE_SIZE } from \"../../lib/vars\";\n// import IconsBtn from \"../shared/IconsBtn\";\n// import { BsGrid } from \"react-icons/bs\";\n// import { FiList } from \"react-icons/fi\";\n// import { Skeleton, useColorMode } from \"@chakra-ui/core\";\n// import Box from \"@chakra-ui/core/dist/Box\";\n// import { borderColor, color } from \"../../customTheme\";\n// import Button from \"@chakra-ui/core/dist/Button\";\n// import { downChevron } from \"../../lib/icons\";\n// import { GlobalContext } from \"../../context/global.context\";\n//\n//\n//\n// const Previews = ({ posts }) => {\n//   const { isListView, switchView } = useContext(GlobalContext);\n//\n//   const { colorMode } = useColorMode();\n//\n//   const initialData = posts && posts;\n//\n//   const { data: paginatedPosts, size, setSize } = useGetPosts(initialData);\n//\n//   if (!paginatedPosts) return \"loading\";\n//\n//   const isEmpty = paginatedPosts?.length === 0;\n//\n//   const isReachingEnd =\n//     isEmpty ||\n//     (paginatedPosts &&\n//       paginatedPosts[paginatedPosts.length - 1]?.length < PAGE_SIZE);\n//\n//   console.log(size);\n//\n//   const previews = paginatedPosts.map(\n//     ({ _id, title, subtitle, slug, mainImage, publishedAt, body }) =>\n//       slug && (\n//         <PostCard\n//           key={_id}\n//           title={title}\n//           subtitle={subtitle}\n//           slug={slug}\n//           mainImage={mainImage}\n//           publishedAt={publishedAt}\n//           body={body}\n//         />\n//       )\n//   );\n//\n//   const previewClass = isListView\n//     ? \"md:mx-16 ip:ml-48\"\n//     : \"lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12\";\n//\n//   return (\n//     <Box>\n//       <div className=\"view-button-container\">\n//         <IconsBtn\n//           whileHover={{ scale: 1.2 }}\n//           firstIcon={BsGrid}\n//           secondIcon={FiList}\n//           toggle={switchView}\n//           isToggled={isListView}\n//           className=\"ease\"\n//         />\n//       </div>\n//       <Skeleton isLoaded={paginatedPosts}>\n//         <Box\n//           color={color[colorMode]}\n//           className={`preview-container ${previewClass}`}\n//         >\n//           {previews}\n//         </Box>\n//       </Skeleton>\n//       <div className=\"preview-button-container\">\n//         <Button\n//           disabled={isReachingEnd}\n//           size=\"lg\"\n//           rounded=\"full\"\n//           onClick={() => !isReachingEnd && setSize(size + 1)}\n//           variant=\"outline\"\n//           borderColor={borderColor[colorMode]}\n//           _focus={{ outline: \"none\" }}\n//         >\n//           {downChevron(isReachingEnd)}\n//         </Button>\n//       </div>\n//     </Box>\n//   );\n// };\n//\n// export default Previews;\n"]},"metadata":{},"sourceType":"script"}