{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Volodymyr_Kartaiev\\\\WebstormProjects\\\\blog\\\\arminian-perspective-blog\\\\client\\\\components\\\\posts-preview\\\\Previews.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from \"react\";\nimport PostCard from \"./PostCard\";\nimport { useGetPosts } from \"../../actions\";\nimport { PAGE_SIZE } from \"../../lib/vars\";\nimport IconsBtn from \"../shared/IconsBtn\";\nimport { BsGrid } from \"react-icons/bs\";\nimport { FiList } from \"react-icons/fi\";\nimport { Skeleton, useColorMode } from \"@chakra-ui/core\";\nimport Box from \"@chakra-ui/core/dist/Box\";\nimport { borderColor, color } from \"../../customTheme\";\nimport Button from \"@chakra-ui/core/dist/Button\";\nimport { downChevron } from \"../../lib/icons\";\nimport { GlobalContext } from \"../../context/global.context\";\nimport { getAllPosts } from \"../../lib/api\";\nexport function getStaticProps() {\n  return _getStaticProps.apply(this, arguments);\n}\n\nfunction _getStaticProps() {\n  _getStaticProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var posts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getAllPosts(0);\n\n          case 2:\n            posts = _context.sent;\n            return _context.abrupt(\"return\", {\n              props: {\n                posts: posts\n              }\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getStaticProps.apply(this, arguments);\n}\n\nvar Previews = function Previews(_ref) {\n  _s();\n\n  var _paginatedPosts;\n\n  var posts = _ref.posts;\n\n  var _useContext = useContext(GlobalContext),\n      isListView = _useContext.isListView,\n      switchView = _useContext.switchView;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var initialData = posts && posts;\n\n  var _useGetPosts = useGetPosts(initialData),\n      paginatedPosts = _useGetPosts.data,\n      size = _useGetPosts.size,\n      setSize = _useGetPosts.setSize;\n\n  if (!paginatedPosts) return \"loading\";\n  var isEmpty = (paginatedPosts === null || paginatedPosts === void 0 ? void 0 : paginatedPosts.length) === 0;\n  var isReachingEnd = isEmpty || paginatedPosts && ((_paginatedPosts = paginatedPosts[paginatedPosts.length - 1]) === null || _paginatedPosts === void 0 ? void 0 : _paginatedPosts.length) < PAGE_SIZE;\n  console.log(size);\n  var previews = paginatedPosts.map(function (_ref2) {\n    var _id = _ref2._id,\n        title = _ref2.title,\n        subtitle = _ref2.subtitle,\n        slug = _ref2.slug,\n        mainImage = _ref2.mainImage,\n        publishedAt = _ref2.publishedAt,\n        body = _ref2.body;\n    return slug && __jsx(PostCard, {\n      key: _id,\n      title: title,\n      subtitle: subtitle,\n      slug: slug,\n      mainImage: mainImage,\n      publishedAt: publishedAt,\n      body: body,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    });\n  });\n  var previewClass = isListView ? \"md:mx-16 ip:ml-48\" : \"lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12\";\n  return __jsx(Box, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"view-button-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, __jsx(IconsBtn, {\n    whileHover: {\n      scale: 1.2\n    },\n    firstIcon: BsGrid,\n    secondIcon: FiList,\n    toggle: switchView,\n    isToggled: isListView,\n    className: \"ease\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })), __jsx(Skeleton, {\n    isLoaded: paginatedPosts,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    color: color[colorMode],\n    className: \"preview-container \".concat(previewClass),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, previews)), __jsx(\"div\", {\n    className: \"preview-button-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    disabled: isReachingEnd,\n    size: \"lg\",\n    rounded: \"full\",\n    onClick: function onClick() {\n      return !isReachingEnd && setSize(size + 1);\n    },\n    variant: \"outline\",\n    borderColor: borderColor[colorMode],\n    _focus: {\n      outline: \"none\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, downChevron(isReachingEnd))));\n};\n\n_s(Previews, \"g/tR9pTjfxLpNRPuhmpaBJ8sSuA=\", false, function () {\n  return [useColorMode, useGetPosts];\n});\n\n_c = Previews;\nexport default Previews;\n\nvar _c;\n\n$RefreshReg$(_c, \"Previews\");","map":{"version":3,"sources":["C:/Users/Volodymyr_Kartaiev/WebstormProjects/blog/arminian-perspective-blog/client/components/posts-preview/Previews.js"],"names":["React","useContext","PostCard","useGetPosts","PAGE_SIZE","IconsBtn","BsGrid","FiList","Skeleton","useColorMode","Box","borderColor","color","Button","downChevron","GlobalContext","getAllPosts","getStaticProps","posts","props","Previews","isListView","switchView","colorMode","initialData","paginatedPosts","data","size","setSize","isEmpty","length","isReachingEnd","console","log","previews","map","_id","title","subtitle","slug","mainImage","publishedAt","body","previewClass","scale","outline"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport PostCard from \"./PostCard\";\nimport { useGetPosts } from \"../../actions\";\nimport { PAGE_SIZE } from \"../../lib/vars\";\nimport IconsBtn from \"../shared/IconsBtn\";\nimport { BsGrid } from \"react-icons/bs\";\nimport { FiList } from \"react-icons/fi\";\nimport { Skeleton, useColorMode } from \"@chakra-ui/core\";\nimport Box from \"@chakra-ui/core/dist/Box\";\nimport { borderColor, color } from \"../../customTheme\";\nimport Button from \"@chakra-ui/core/dist/Button\";\nimport { downChevron } from \"../../lib/icons\";\nimport { GlobalContext } from \"../../context/global.context\";\nimport { getAllPosts } from \"../../lib/api\";\n\nexport async function getStaticProps() {\n  const posts = await getAllPosts(0);\n  return {\n    props: {\n      posts,\n    },\n  };\n}\n\nconst Previews = ({ posts }) => {\n  const { isListView, switchView } = useContext(GlobalContext);\n\n  const { colorMode } = useColorMode();\n\n  const initialData = posts && posts;\n\n  const { data: paginatedPosts, size, setSize } = useGetPosts(initialData);\n\n  if (!paginatedPosts) return \"loading\";\n\n  const isEmpty = paginatedPosts?.length === 0;\n\n  const isReachingEnd =\n    isEmpty ||\n    (paginatedPosts &&\n      paginatedPosts[paginatedPosts.length - 1]?.length < PAGE_SIZE);\n\n  console.log(size);\n\n  const previews = paginatedPosts.map(\n    ({ _id, title, subtitle, slug, mainImage, publishedAt, body }) =>\n      slug && (\n        <PostCard\n          key={_id}\n          title={title}\n          subtitle={subtitle}\n          slug={slug}\n          mainImage={mainImage}\n          publishedAt={publishedAt}\n          body={body}\n        />\n      )\n  );\n\n  const previewClass = isListView\n    ? \"md:mx-16 ip:ml-48\"\n    : \"lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12\";\n\n  return (\n    <Box>\n      <div className=\"view-button-container\">\n        <IconsBtn\n          whileHover={{ scale: 1.2 }}\n          firstIcon={BsGrid}\n          secondIcon={FiList}\n          toggle={switchView}\n          isToggled={isListView}\n          className=\"ease\"\n        />\n      </div>\n      <Skeleton isLoaded={paginatedPosts}>\n        <Box\n          color={color[colorMode]}\n          className={`preview-container ${previewClass}`}\n        >\n          {previews}\n        </Box>\n      </Skeleton>\n      <div className=\"preview-button-container\">\n        <Button\n          disabled={isReachingEnd}\n          size=\"lg\"\n          rounded=\"full\"\n          onClick={() => !isReachingEnd && setSize(size + 1)}\n          variant=\"outline\"\n          borderColor={borderColor[colorMode]}\n          _focus={{ outline: \"none\" }}\n        >\n          {downChevron(isReachingEnd)}\n        </Button>\n      </div>\n    </Box>\n  );\n};\n\nexport default Previews;\n"]},"metadata":{},"sourceType":"module"}