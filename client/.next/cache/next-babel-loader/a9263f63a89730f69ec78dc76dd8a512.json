{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Volodymyr_Kartaiev\\\\WebstormProjects\\\\blog\\\\arminian-perspective-blog\\\\client\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect } from \"react\";\nimport Layout from \"../components/layout/Layout\";\nimport IconsBtn from \"../components/IconsBtn\";\nimport { downChevron, gridIcon, listIcon } from \"../lib/icons\";\nimport PostCard from \"../components/posts-preview/PostCard\";\nimport { useWindowWidth } from \"../hooks/useWindowWidth\";\nimport { handleScroll } from \"../lib/helpers\";\nimport { GlobalContext } from \"../context/global.context\";\nimport { useGetPosts } from \"../actions\";\nimport Button from \"@chakra-ui/core/dist/Button\";\nimport { Skeleton } from \"@chakra-ui/core\";\nimport { PAGE_SIZE } from \"../lib/vars\";\n\nvar App = function App(_ref) {\n  _s();\n\n  var _paginatedPosts$, _paginatedPosts;\n\n  var posts = _ref.posts;\n\n  var _useContext = useContext(GlobalContext),\n      setListView = _useContext.setListView,\n      isListView = _useContext.isListView,\n      switchView = _useContext.switchView;\n\n  var width = useWindowWidth();\n  useEffect(function () {\n    width <= 768 && setListView(false);\n  }, [width]);\n  var initialData = posts && [posts];\n\n  var _useGetPosts = useGetPosts(initialData),\n      paginatedPosts = _useGetPosts.data,\n      size = _useGetPosts.size,\n      setSize = _useGetPosts.setSize;\n\n  var isEmpty = (paginatedPosts === null || paginatedPosts === void 0 ? void 0 : (_paginatedPosts$ = paginatedPosts[0]) === null || _paginatedPosts$ === void 0 ? void 0 : _paginatedPosts$.length) === 0;\n  var isReachingEnd = isEmpty || paginatedPosts && ((_paginatedPosts = paginatedPosts[paginatedPosts.length - 1]) === null || _paginatedPosts === void 0 ? void 0 : _paginatedPosts.length) < PAGE_SIZE; // const increaseSize = () => !isReachingEnd && setSize((prev) => prev + 1);\n  //\n  // useEffect(() => {\n  //   window.addEventListener(\"scroll\", () => handleScroll(increaseSize));\n  //   return () =>\n  //     window.removeEventListener(\"scroll\", () => handleScroll(increaseSize));\n  // }, []);\n\n  if (!paginatedPosts) return \"loading\";\n  var previews = paginatedPosts && paginatedPosts.map(function (el) {\n    return el.map(function (_ref2) {\n      var _id = _ref2._id,\n          title = _ref2.title,\n          subtitle = _ref2.subtitle,\n          slug = _ref2.slug,\n          mainImage = _ref2.mainImage,\n          publishedAt = _ref2.publishedAt,\n          body = _ref2.body;\n      return __jsx(PostCard, {\n        key: _id,\n        title: title,\n        subtitle: subtitle,\n        slug: slug,\n        mainImage: mainImage,\n        publishedAt: publishedAt,\n        body: body,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }\n      });\n    });\n  });\n  var gridClass = isListView ? \"md:mx-16\" : \"lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12\";\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"hidden h-10 mt-6 justify-start items-center lg:flex md:px-16 xl:px-16 ip:px-64\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(IconsBtn, {\n    firstIcon: gridIcon,\n    secondIcon: listIcon,\n    toggle: switchView,\n    isToggled: isListView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  })), __jsx(Skeleton, {\n    isLoaded: paginatedPosts,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"mb-6 grid grid-cols-1 gap-6 lg:mx-16 ip:mx-64 \".concat(gridClass),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, previews)), __jsx(\"div\", {\n    className: \"flex  items-center justify-center my-6 lg:my-12 lg:mx-16 ip:mx-64\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    disabled: isReachingEnd,\n    onClick: function onClick() {\n      return !isReachingEnd && setSize(size + 1);\n    },\n    variant: \"outline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, downChevron)));\n};\n\n_s(App, \"Tg+WtdywMcL9biuNROYPH8Ljwic=\", false, function () {\n  return [useWindowWidth, useGetPosts];\n});\n\n_c = App;\nexport var __N_SSG = true;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Volodymyr_Kartaiev/WebstormProjects/blog/arminian-perspective-blog/client/pages/index.js"],"names":["React","useContext","useEffect","Layout","IconsBtn","downChevron","gridIcon","listIcon","PostCard","useWindowWidth","handleScroll","GlobalContext","useGetPosts","Button","Skeleton","PAGE_SIZE","App","posts","setListView","isListView","switchView","width","initialData","paginatedPosts","data","size","setSize","isEmpty","length","isReachingEnd","previews","map","el","_id","title","subtitle","slug","mainImage","publishedAt","body","gridClass"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport Layout from \"../components/layout/Layout\";\r\nimport { getAllPosts } from \"../lib/api\";\r\nimport IconsBtn from \"../components/IconsBtn\";\r\nimport { downChevron, gridIcon, listIcon } from \"../lib/icons\";\r\nimport PostCard from \"../components/posts-preview/PostCard\";\r\nimport { useWindowWidth } from \"../hooks/useWindowWidth\";\r\nimport { handleScroll } from \"../lib/helpers\";\r\nimport { GlobalContext } from \"../context/global.context\";\r\n\r\nimport { useGetPosts } from \"../actions\";\r\nimport Button from \"@chakra-ui/core/dist/Button\";\r\nimport { Skeleton } from \"@chakra-ui/core\";\r\nimport { PAGE_SIZE } from \"../lib/vars\";\r\n\r\nconst App = ({ posts }) => {\r\n  const { setListView, isListView, switchView } = useContext(GlobalContext);\r\n\r\n  const width = useWindowWidth();\r\n\r\n  useEffect(() => {\r\n    width <= 768 && setListView(false);\r\n  }, [width]);\r\n\r\n  const initialData = posts && [posts];\r\n\r\n  const { data: paginatedPosts, size, setSize } = useGetPosts(initialData);\r\n\r\n  const isEmpty = paginatedPosts?.[0]?.length === 0;\r\n  const isReachingEnd =\r\n    isEmpty ||\r\n    (paginatedPosts &&\r\n      paginatedPosts[paginatedPosts.length - 1]?.length < PAGE_SIZE);\r\n\r\n  // const increaseSize = () => !isReachingEnd && setSize((prev) => prev + 1);\r\n  //\r\n  // useEffect(() => {\r\n  //   window.addEventListener(\"scroll\", () => handleScroll(increaseSize));\r\n  //   return () =>\r\n  //     window.removeEventListener(\"scroll\", () => handleScroll(increaseSize));\r\n  // }, []);\r\n\r\n  if (!paginatedPosts) return \"loading\";\r\n\r\n  const previews =\r\n    paginatedPosts &&\r\n    paginatedPosts.map((el) =>\r\n      el.map(({ _id, title, subtitle, slug, mainImage, publishedAt, body }) => (\r\n        <PostCard\r\n          key={_id}\r\n          title={title}\r\n          subtitle={subtitle}\r\n          slug={slug}\r\n          mainImage={mainImage}\r\n          publishedAt={publishedAt}\r\n          body={body}\r\n        />\r\n      ))\r\n    );\r\n\r\n  const gridClass = isListView\r\n    ? \"md:mx-16\"\r\n    : \"lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12\";\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"hidden h-10 mt-6 justify-start items-center lg:flex md:px-16 xl:px-16 ip:px-64\">\r\n        <IconsBtn\r\n          firstIcon={gridIcon}\r\n          secondIcon={listIcon}\r\n          toggle={switchView}\r\n          isToggled={isListView}\r\n        />\r\n      </div>\r\n      <Skeleton isLoaded={paginatedPosts}>\r\n        <div\r\n          className={`mb-6 grid grid-cols-1 gap-6 lg:mx-16 ip:mx-64 ${gridClass}`}\r\n        >\r\n          {previews}\r\n        </div>\r\n      </Skeleton>\r\n      <div className=\"flex  items-center justify-center my-6 lg:my-12 lg:mx-16 ip:mx-64\">\r\n        <Button\r\n          disabled={isReachingEnd}\r\n          onClick={() => !isReachingEnd && setSize(size + 1)}\r\n          variant=\"outline\"\r\n        >\r\n          {downChevron}\r\n        </Button>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport async function getStaticProps() {\r\n  const posts = await getAllPosts(0);\r\n  return {\r\n    props: {\r\n      posts,\r\n    },\r\n  };\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}