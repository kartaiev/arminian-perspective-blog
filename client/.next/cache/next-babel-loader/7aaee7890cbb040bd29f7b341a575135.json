{"ast":null,"code":"import { useEffect, useState } from \"react\";\nexport const useWindowSize = () => {\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n};","map":{"version":3,"sources":["/Users/earth/WebstormProjects/arminian-perspective-blog/client/hooks/useWindowSize.js"],"names":["useEffect","useState","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BH,QAAQ,CAAC;AAC3CI,IAAAA,KAAK,EAAEC,SADoC;AAG3CC,IAAAA,MAAM,EAAED;AAHmC,GAAD,CAA5C;AAMAN,EAAAA,SAAS,CAAC,MAAM;AACd;AAEA,aAASQ,YAAT,GAAwB;AACtB;AAEAJ,MAAAA,aAAa,CAAC;AACZC,QAAAA,KAAK,EAAEI,MAAM,CAACC,UADF;AAGZH,QAAAA,MAAM,EAAEE,MAAM,CAACE;AAHH,OAAD,CAAb;AAKD,KAXa,CAad;;;AAEAF,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAfc,CAiBd;;AAEAA,IAAAA,YAAY,GAnBE,CAqBd;;AAEA,WAAO,MAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAb;AACD,GAxBQ,EAwBN,EAxBM,CAAT,CAPiC,CA+BzB;;AAER,SAAOL,UAAP;AACD,CAlCM","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport const useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n\n    function handleResize() {\n      // Set window width/height to state\n\n      setWindowSize({\n        width: window.innerWidth,\n\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n\n    handleResize();\n\n    // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n};\n"]},"metadata":{},"sourceType":"module"}