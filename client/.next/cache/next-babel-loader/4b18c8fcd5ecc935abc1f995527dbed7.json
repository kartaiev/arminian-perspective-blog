{"ast":null,"code":"import client from \"./client\";\nimport groq from \"groq\";\n\nconst queryAll = offset => groq`*[_type == \"post\"][${offset}...${offset + 3}]  | order(publishedAt desc) {\n  _id,\n  title,\n  subtitle,\n  publishedAt,\n  slug,\n  mainImage,\n}`;\n\nexport const getAllPosts = async ({\n  offset\n}) => {\n  return await client.fetch(queryAll(offset));\n};\nconst queryBuSlug = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  subtitle,\n  publishedAt,\n  \"name\": author->name,\n  mainImage,\n  \"categories\": categories[]->title,\n  body\n}`;\nexport const getSinglePost = async slug => {\n  return await client.fetch(queryBuSlug, {\n    slug\n  });\n};","map":{"version":3,"sources":["C:/Users/Volodymyr_Kartaiev/WebstormProjects/arminian-perspective-blog/client/lib/api.js"],"names":["client","groq","queryAll","offset","getAllPosts","fetch","queryBuSlug","getSinglePost","slug"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAYF,IAAK,sBAAqBE,MAAO,MAC5DA,MAAM,GAAG,CACV;;;;;;;EAFD;;AAWA,OAAO,MAAMC,WAAW,GAAG,OAAO;AAAED,EAAAA;AAAF,CAAP,KAAsB;AAC/C,SAAO,MAAMH,MAAM,CAACK,KAAP,CAAaH,QAAQ,CAACC,MAAD,CAArB,CAAb;AACD,CAFM;AAIP,MAAMG,WAAW,GAAGL,IAAK;;;;;;;;EAAzB;AAUA,OAAO,MAAMM,aAAa,GAAG,MAAOC,IAAP,IAAgB;AAC3C,SAAO,MAAMR,MAAM,CAACK,KAAP,CAAaC,WAAb,EAA0B;AAAEE,IAAAA;AAAF,GAA1B,CAAb;AACD,CAFM","sourcesContent":["import client from \"./client\";\nimport groq from \"groq\";\n\nconst queryAll = (offset) => groq`*[_type == \"post\"][${offset}...${\n  offset + 3\n}]  | order(publishedAt desc) {\n  _id,\n  title,\n  subtitle,\n  publishedAt,\n  slug,\n  mainImage,\n}`;\n\nexport const getAllPosts = async ({ offset }) => {\n  return await client.fetch(queryAll(offset));\n};\n\nconst queryBuSlug = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  subtitle,\n  publishedAt,\n  \"name\": author->name,\n  mainImage,\n  \"categories\": categories[]->title,\n  body\n}`;\n\nexport const getSinglePost = async (slug) => {\n  return await client.fetch(queryBuSlug, { slug });\n};\n"]},"metadata":{},"sourceType":"module"}