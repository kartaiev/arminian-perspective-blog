{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"*[_type == \\\"post\\\"] {slug}\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"*[_type == \\\"post\\\" && slug.current == $slug][0]{\\n  title,\\n  subtitle,\\n  publishedAt,\\n  \\\"name\\\": author->name,\\n  mainImage,\\n  \\\"categories\\\": categories[]->title,\\n  body\\n}\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"*[_type == \\\"post\\\"][\", \"...\", \"]  | order(_createdAt asc) {\\n  _id,\\n  title,\\n  subtitle,\\n  publishedAt,\\n  slug,\\n  mainImage,\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport client from \"./client\";\nimport groq from \"groq\";\nimport { PAGE_SIZE } from \"./vars\";\n\nvar queryAll = function queryAll(offset) {\n  return groq(_templateObject(), offset, offset + PAGE_SIZE);\n};\n\nexport var getAllPosts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(offset) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return client.fetch(queryAll(offset));\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAllPosts(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar queryBySlug = groq(_templateObject2());\nexport var getSinglePost = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(slug) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return client.fetch(queryBySlug, {\n              slug: slug\n            });\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getSinglePost(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar queryAllSLugs = groq(_templateObject3());\nexport var getAllSlugs = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return client.fetch(queryAllSLugs);\n\n          case 2:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getAllSlugs() {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/Volodymyr_Kartaiev/WebstormProjects/blog/arminian-perspective-blog/client/lib/api.js"],"names":["client","groq","PAGE_SIZE","queryAll","offset","getAllPosts","fetch","queryBySlug","getSinglePost","slug","queryAllSLugs","getAllSlugs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,SAAT,QAA0B,QAA1B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD;AAAA,SAAYH,IAAZ,oBAAsCG,MAAtC,EACfA,MAAM,GAAGF,SADM;AAAA,CAAjB;;AAWA,OAAO,IAAMG,WAAW;AAAA,sEAAG,iBAAOD,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACZJ,MAAM,CAACM,KAAP,CAAaH,QAAQ,CAACC,MAAD,CAArB,CADY;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXC,WAAW;AAAA;AAAA;AAAA,GAAjB;AAIP,IAAME,WAAW,GAAGN,IAAH,oBAAjB;AAUA,OAAO,IAAMO,aAAa;AAAA,uEAAG,kBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACdT,MAAM,CAACM,KAAP,CAAaC,WAAb,EAA0B;AAAEE,cAAAA,IAAI,EAAJA;AAAF,aAA1B,CADc;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbD,aAAa;AAAA;AAAA;AAAA,GAAnB;AAIP,IAAME,aAAa,GAAGT,IAAH,oBAAnB;AAEA,OAAO,IAAMU,WAAW;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACZX,MAAM,CAACM,KAAP,CAAaI,aAAb,CADY;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXC,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["import client from \"./client\";\r\nimport groq from \"groq\";\r\nimport { PAGE_SIZE } from \"./vars\";\r\n\r\nconst queryAll = (offset) => groq`*[_type == \"post\"][${offset}...${\r\n  offset + PAGE_SIZE\r\n}]  | order(_createdAt asc) {\r\n  _id,\r\n  title,\r\n  subtitle,\r\n  publishedAt,\r\n  slug,\r\n  mainImage,\r\n}`;\r\n\r\nexport const getAllPosts = async (offset) => {\r\n  return await client.fetch(queryAll(offset));\r\n};\r\n\r\nconst queryBySlug = groq`*[_type == \"post\" && slug.current == $slug][0]{\r\n  title,\r\n  subtitle,\r\n  publishedAt,\r\n  \"name\": author->name,\r\n  mainImage,\r\n  \"categories\": categories[]->title,\r\n  body\r\n}`;\r\n\r\nexport const getSinglePost = async (slug) => {\r\n  return await client.fetch(queryBySlug, { slug });\r\n};\r\n\r\nconst queryAllSLugs = groq`*[_type == \"post\"] {slug}`;\r\n\r\nexport const getAllSlugs = async () => {\r\n  return await client.fetch(queryAllSLugs);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}