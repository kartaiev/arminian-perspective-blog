{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Volodymyr_Kartaiev\\\\WebstormProjects\\\\arminian-perspective-blog\\\\client\\\\pages\\\\post\\\\[slug].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"*[_type == \\\"post\\\" && slug.current == $slug][0]{\\n  title,\\n  \\\"name\\\": author->name,\\n  \\\"categories\\\": categories[]->title,\\n  mainImage,\\n  body\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport client from \"../../client\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport groq from \"groq\";\nimport Layout from \"../../components/layout/Layout\";\nimport { urlFor } from \"../../lib/helpers\";\n\nvar Post = function Post(_ref) {\n  var _ref$title = _ref.title,\n      title = _ref$title === void 0 ? \"\" : _ref$title,\n      _ref$name = _ref.name,\n      name = _ref$name === void 0 ? \"\" : _ref$name,\n      categories = _ref.categories,\n      _ref$body = _ref.body,\n      body = _ref$body === void 0 ? [] : _ref$body,\n      mainImage = _ref.mainImage;\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, __jsx(\"article\", {\n    className: \"h-full mb-20\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }, mainImage && __jsx(\"div\", {\n    className: \"mainImage-container mt-20\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 11\n    }\n  }, __jsx(\"img\", {\n    className: \"w-full h-full block object-cover top-0 left-0 align-top\",\n    src: urlFor(mainImage).auto(\"format\").url(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    className: \"max-w-4xl p-8 mx-auto\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }\n  }, title), __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }, \"By \", name), categories && __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, \"Posted in\", categories.map(function (category) {\n    return __jsx(\"li\", {\n      key: category,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }\n    }, category);\n  })), __jsx(BlockContent, _extends({\n    blocks: body,\n    imageOptions: {\n      w: 320,\n      h: 240,\n      fit: \"max\"\n    }\n  }, client.config(), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  })))));\n};\n\n_c = Post;\nvar query = groq(_templateObject());\n\nPost.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var _context$query$slug, slug;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context$query$slug = context.query.slug, slug = _context$query$slug === void 0 ? \"\" : _context$query$slug;\n            _context.next = 3;\n            return client.fetch(query, {\n              slug: slug\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["C:/Users/Volodymyr_Kartaiev/WebstormProjects/arminian-perspective-blog/client/pages/post/[slug].js"],"names":["client","BlockContent","groq","Layout","urlFor","Post","title","name","categories","body","mainImage","auto","url","map","category","w","h","fit","config","query","getInitialProps","context","slug","fetch"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,cAAnB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,MAAT,QAAuB,mBAAvB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAiE;AAAA,wBAA9DC,KAA8D;AAAA,MAA9DA,KAA8D,2BAAtD,EAAsD;AAAA,uBAAlDC,IAAkD;AAAA,MAAlDA,IAAkD,0BAA3C,EAA2C;AAAA,MAAvCC,UAAuC,QAAvCA,UAAuC;AAAA,uBAA3BC,IAA2B;AAAA,MAA3BA,IAA2B,0BAApB,EAAoB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AAC5E,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,SAAS,EAAC,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,SAAS,IACR;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAC,yDADZ;AAEE,IAAA,GAAG,EAAEN,MAAM,CAACM,SAAD,CAAN,CAAkBC,IAAlB,CAAuB,QAAvB,EAAiCC,GAAjC,EAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,EASE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKN,KAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAUC,IAAV,CAFF,EAGGC,UAAU,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEGA,UAAU,CAACK,GAAX,CAAe,UAACC,QAAD;AAAA,WACd;AAAI,MAAA,GAAG,EAAEA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoBA,QAApB,CADc;AAAA,GAAf,CAFH,CAJJ,EAWE,MAAC,YAAD;AACE,IAAA,MAAM,EAAEL,IADV;AAEE,IAAA,YAAY,EAAE;AAAEM,MAAAA,CAAC,EAAE,GAAL;AAAUC,MAAAA,CAAC,EAAE,GAAb;AAAkBC,MAAAA,GAAG,EAAE;AAAvB;AAFhB,KAGMjB,MAAM,CAACkB,MAAP,EAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAXF,CATF,CADF,CADF;AA+BD,CAhCD;;KAAMb,I;AAkCN,IAAMc,KAAK,GAAGjB,IAAH,mBAAX;;AAQAG,IAAI,CAACe,eAAL;AAAA,uEAAuB,iBAAgBC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kCACCA,OAAO,CAACF,KADT,CACbG,IADa,EACbA,IADa,oCACN,EADM;AAAA;AAAA,mBAERtB,MAAM,CAACuB,KAAP,CAAaJ,KAAb,EAAoB;AAAEG,cAAAA,IAAI,EAAJA;AAAF,aAApB,CAFQ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAejB,IAAf","sourcesContent":["import client from \"../../client\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport groq from \"groq\";\nimport Layout from \"../../components/layout/Layout\";\nimport { urlFor } from \"../../lib/helpers\";\n\nconst Post = ({ title = \"\", name = \"\", categories, body = [], mainImage }) => {\n  return (\n    <Layout>\n      <article className=\"h-full mb-20\">\n        {mainImage && (\n          <div className=\"mainImage-container mt-20\">\n            <img\n              className=\"w-full h-full block object-cover top-0 left-0 align-top\"\n              src={urlFor(mainImage).auto(\"format\").url()}\n            />\n          </div>\n        )}\n        <div className=\"max-w-4xl p-8 mx-auto\">\n          <h1>{title}</h1>\n          <span>By {name}</span>\n          {categories && (\n            <ul>\n              Posted in\n              {categories.map((category) => (\n                <li key={category}>{category}</li>\n              ))}\n            </ul>\n          )}\n          <BlockContent\n            blocks={body}\n            imageOptions={{ w: 320, h: 240, fit: \"max\" }}\n            {...client.config()}\n          />\n        </div>\n      </article>\n    </Layout>\n  );\n};\n\nconst query = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  \"name\": author->name,\n  \"categories\": categories[]->title,\n  mainImage,\n  body\n}`;\n\nPost.getInitialProps = async function (context) {\n  const { slug = \"\" } = context.query;\n  return await client.fetch(query, { slug });\n};\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}