{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Volodymyr_Kartaiev\\\\WebstormProjects\\\\arminian-perspective-blog\\\\client\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/layout/Layout\";\nimport { useToggle } from \"../hooks/useToggle\";\nimport IconsBtn from \"../components/IconsBtn\";\nimport { gridIcon, listIcon } from \"../lib/icons\";\nimport PostCard from \"../components/posts-preview/PostCard\";\nimport { useWindowWidth } from \"../hooks/useWindowWidth\";\nimport { useGetPosts } from \"../actions\";\nimport Spinner from \"@chakra-ui/core/dist/Spinner\";\nimport { Button } from \"@chakra-ui/core\";\n\nvar App = function App(_ref) {\n  _s();\n\n  var initialData = _ref.posts;\n\n  var _useToggle = useToggle(),\n      isListView = _useToggle.isToggled,\n      setListView = _useToggle.setToggle,\n      switchView = _useToggle.toggle;\n\n  var _useState = useState(0),\n      index = _useState[0],\n      setIndex = _useState[1];\n\n  var width = useWindowWidth();\n  useEffect(function () {\n    width <= 768 && setListView(false);\n  }, [width]);\n\n  var _useGetPosts = useGetPosts(index),\n      posts = _useGetPosts.data,\n      error = _useGetPosts.error;\n\n  var previews = posts && posts.map(function (_ref2) {\n    var _id = _ref2._id,\n        title = _ref2.title,\n        subtitle = _ref2.subtitle,\n        slug = _ref2.slug,\n        mainImage = _ref2.mainImage,\n        publishedAt = _ref2.publishedAt,\n        body = _ref2.body;\n    return __jsx(PostCard, {\n      key: _id,\n      title: title,\n      subtitle: subtitle,\n      slug: slug,\n      mainImage: mainImage,\n      publishedAt: publishedAt,\n      body: body,\n      isListView: isListView,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    });\n  });\n  var gridClass = isListView ? \"md:mx-16\" : \"lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12\";\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, !posts && __jsx(\"div\", {\n    className: \"h-full w-full flex items-center justify-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    size: \"xl\",\n    thickness: \"4px\",\n    speed: \"0.65s\",\n    emptyColor: \"gray.200\",\n    color: \"gray.800\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  })), __jsx(\"div\", {\n    className: \"hidden h-10 mt-6 justify-start items-center lg:flex md:px-16 xl:px-16 ip:px-64\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, __jsx(IconsBtn, {\n    firstIcon: gridIcon,\n    secondIcon: listIcon,\n    isListView: isListView,\n    switchView: switchView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"mb-6 grid grid-cols-1 gap-6 lg:mx-16 ip:mx-64 \".concat(gridClass),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, previews), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setIndex((index + 1) * 3);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \"Button\"));\n};\n\n_s(App, \"ANnfPXIk0OgZzsPIGARhDqjY4bw=\", false, function () {\n  return [useToggle, useWindowWidth, useGetPosts];\n});\n\n_c = App;\nexport var __N_SSG = true;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Volodymyr_Kartaiev/WebstormProjects/arminian-perspective-blog/client/pages/index.js"],"names":["React","useEffect","useState","Layout","useToggle","IconsBtn","gridIcon","listIcon","PostCard","useWindowWidth","useGetPosts","Spinner","Button","App","initialData","posts","isListView","isToggled","setListView","setToggle","switchView","toggle","index","setIndex","width","data","error","previews","map","_id","title","subtitle","slug","mainImage","publishedAt","body","gridClass"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/layout/Layout\";\nimport { getAllPosts } from \"../lib/api\";\nimport { useToggle } from \"../hooks/useToggle\";\nimport IconsBtn from \"../components/IconsBtn\";\nimport { gridIcon, listIcon } from \"../lib/icons\";\nimport PostCard from \"../components/posts-preview/PostCard\";\nimport { useWindowWidth } from \"../hooks/useWindowWidth\";\nimport { useGetPosts } from \"../actions\";\nimport Spinner from \"@chakra-ui/core/dist/Spinner\";\nimport { Button } from \"@chakra-ui/core\";\n\nconst App = ({ posts: initialData }) => {\n  const {\n    isToggled: isListView,\n    setToggle: setListView,\n    toggle: switchView,\n  } = useToggle();\n\n  const [index, setIndex] = useState(0);\n\n  const width = useWindowWidth();\n\n  useEffect(() => {\n    width <= 768 && setListView(false);\n  }, [width]);\n\n  const { data: posts, error } = useGetPosts(index);\n\n  const previews =\n    posts &&\n    posts.map(\n      ({ _id, title, subtitle, slug, mainImage, publishedAt, body }) => (\n        <PostCard\n          key={_id}\n          title={title}\n          subtitle={subtitle}\n          slug={slug}\n          mainImage={mainImage}\n          publishedAt={publishedAt}\n          body={body}\n          isListView={isListView}\n        />\n      )\n    );\n\n  const gridClass = isListView\n    ? \"md:mx-16\"\n    : \"lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12\";\n\n  return (\n    <Layout>\n      {!posts && (\n        <div className=\"h-full w-full flex items-center justify-center\">\n          <Spinner\n            size=\"xl\"\n            thickness=\"4px\"\n            speed=\"0.65s\"\n            emptyColor=\"gray.200\"\n            color=\"gray.800\"\n          />\n        </div>\n      )}\n      <div className=\"hidden h-10 mt-6 justify-start items-center lg:flex md:px-16 xl:px-16 ip:px-64\">\n        <IconsBtn\n          firstIcon={gridIcon}\n          secondIcon={listIcon}\n          isListView={isListView}\n          switchView={switchView}\n        />\n      </div>\n      <div\n        className={`mb-6 grid grid-cols-1 gap-6 lg:mx-16 ip:mx-64 ${gridClass}`}\n      >\n        {previews}\n      </div>\n      <button onClick={() => setIndex((index + 1) * 3)}>Button</button>\n    </Layout>\n  );\n};\n\nexport async function getStaticProps() {\n  const posts = await getAllPosts(0);\n  return {\n    props: {\n      posts,\n    },\n  };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}