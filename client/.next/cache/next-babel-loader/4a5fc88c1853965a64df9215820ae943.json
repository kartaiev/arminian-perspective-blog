{"ast":null,"code":"var _jsxFileName = \"/Users/earth/WebstormProjects/arminian-perspective-blog/client/context/global.context.js\";\nvar __jsx = React.createElement;\nimport React, { createContext, useEffect } from \"react\";\nimport { useToggle } from \"../hooks/useToggle\";\nimport { useWindowWidth } from \"../hooks/useWindowWidth\";\nexport const GlobalContext = /*#__PURE__*/createContext(undefined);\nexport const GlobalProvider = ({\n  children\n}) => {\n  let width;\n  useEffect(() => {\n    width = useWindowWidth();\n  });\n  const {\n    isToggled: isListView,\n    setToggle: setListView,\n    toggle: switchView\n  } = useToggle();\n  return __jsx(GlobalContext.Provider, {\n    value: {\n      width,\n      isListView,\n      setListView,\n      switchView\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/earth/WebstormProjects/arminian-perspective-blog/client/context/global.context.js"],"names":["React","createContext","useEffect","useToggle","useWindowWidth","GlobalContext","undefined","GlobalProvider","children","width","isToggled","isListView","setToggle","setListView","toggle","switchView"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,cAAT,QAA+B,yBAA/B;AAEA,OAAO,MAAMC,aAAa,gBAAGJ,aAAa,CAACK,SAAD,CAAnC;AAEP,OAAO,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9C,MAAIC,KAAJ;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,KAAK,GAAGL,cAAc,EAAtB;AACD,GAFQ,CAAT;AAIA,QAAM;AACJM,IAAAA,SAAS,EAAEC,UADP;AAEJC,IAAAA,SAAS,EAAEC,WAFP;AAGJC,IAAAA,MAAM,EAAEC;AAHJ,MAIFZ,SAAS,EAJb;AAMA,SACE,MAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AAAEM,MAAAA,KAAF;AAASE,MAAAA,UAAT;AAAqBE,MAAAA,WAArB;AAAkCE,MAAAA;AAAlC,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGP,QAHH,CADF;AAOD,CApBM","sourcesContent":["import React, { createContext, useEffect } from \"react\";\nimport { useToggle } from \"../hooks/useToggle\";\nimport { useWindowWidth } from \"../hooks/useWindowWidth\";\n\nexport const GlobalContext = createContext(undefined);\n\nexport const GlobalProvider = ({ children }) => {\n  let width;\n\n  useEffect(() => {\n    width = useWindowWidth();\n  });\n\n  const {\n    isToggled: isListView,\n    setToggle: setListView,\n    toggle: switchView,\n  } = useToggle();\n\n  return (\n    <GlobalContext.Provider\n      value={{ width, isListView, setListView, switchView }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}