{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/earth/WebstormProjects/arminian-perspective-blog/client/components/posts-preview/Previews.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from \"react\";\nimport PostCard from \"./PostCard\";\nimport { useGetPosts, useGetPostsByCategory } from \"../../actions\";\nimport { PAGE_SIZE } from \"../../lib/vars\";\nimport IconsBtn from \"../shared/IconsBtn\";\nimport { BsGrid } from \"react-icons/bs\";\nimport { FiList } from \"react-icons/fi\";\nimport { Box, Button, Skeleton, useColorMode } from \"@chakra-ui/core\";\nimport { borderColor, color } from \"../../customTheme\";\nimport { downChevron } from \"../../lib/icons\";\nimport { GlobalContext } from \"../../context/global.context\";\n\nvar Previews = function Previews(_ref) {\n  _s();\n\n  var _paginatedPosts$, _paginatedPosts;\n\n  var posts = _ref.posts;\n\n  var _useContext = useContext(GlobalContext),\n      isListView = _useContext.isListView,\n      switchView = _useContext.switchView;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var initialData = posts && [posts];\n\n  var _useGetPosts = useGetPosts(initialData),\n      paginatedPosts = _useGetPosts.data,\n      size = _useGetPosts.size,\n      setSize = _useGetPosts.setSize;\n\n  var _useGetPostsByCategor = useGetPostsByCategory(\"faith\"),\n      data = _useGetPostsByCategor.data;\n\n  if (!paginatedPosts) return \"loading\";\n  var isEmpty = (paginatedPosts === null || paginatedPosts === void 0 ? void 0 : (_paginatedPosts$ = paginatedPosts[0]) === null || _paginatedPosts$ === void 0 ? void 0 : _paginatedPosts$.length) === 0;\n  var isReachingEnd = isEmpty || ((_paginatedPosts = paginatedPosts[paginatedPosts.length - 1]) === null || _paginatedPosts === void 0 ? void 0 : _paginatedPosts.length) < PAGE_SIZE;\n  var previews = paginatedPosts.map(function (el) {\n    return el.map(function (_ref2) {\n      var _id = _ref2._id,\n          title = _ref2.title,\n          subtitle = _ref2.subtitle,\n          slug = _ref2.slug,\n          mainImage = _ref2.mainImage,\n          publishedAt = _ref2.publishedAt;\n      return __jsx(PostCard, {\n        key: _id,\n        title: title,\n        subtitle: subtitle,\n        slug: slug,\n        mainImage: mainImage,\n        publishedAt: publishedAt,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 7\n        }\n      });\n    });\n  });\n  var previewClass = isListView ? \"md:mx-16 ip:ml-48\" : \"lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12\";\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"view-button-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, __jsx(IconsBtn, {\n    whileHover: {\n      scale: 1.2\n    },\n    firstIcon: BsGrid,\n    secondIcon: FiList,\n    toggle: switchView,\n    isToggled: isListView,\n    className: \"ease\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })), __jsx(Skeleton, {\n    isLoaded: paginatedPosts,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    color: color[colorMode],\n    className: \"preview-container \".concat(previewClass),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, previews)), __jsx(\"div\", {\n    className: \"preview-button-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    disabled: isReachingEnd,\n    size: \"lg\",\n    rounded: \"full\",\n    onClick: function onClick() {\n      return !isReachingEnd && setSize(size + 1);\n    },\n    variant: \"outline\",\n    borderColor: borderColor[colorMode],\n    _focus: {\n      outline: \"none\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, downChevron(isReachingEnd))));\n};\n\n_s(Previews, \"Sh4VoEDwwv4d2TKt14bsoy0LAbE=\", false, function () {\n  return [useColorMode, useGetPosts, useGetPostsByCategory];\n});\n\n_c = Previews;\nexport default Previews;\n\nvar _c;\n\n$RefreshReg$(_c, \"Previews\");","map":{"version":3,"sources":["/Users/earth/WebstormProjects/arminian-perspective-blog/client/components/posts-preview/Previews.tsx"],"names":["React","useContext","PostCard","useGetPosts","useGetPostsByCategory","PAGE_SIZE","IconsBtn","BsGrid","FiList","Box","Button","Skeleton","useColorMode","borderColor","color","downChevron","GlobalContext","Previews","posts","isListView","switchView","colorMode","initialData","paginatedPosts","data","size","setSize","isEmpty","length","isReachingEnd","previews","map","el","_id","title","subtitle","slug","mainImage","publishedAt","previewClass","scale","outline"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport PostCard from \"./PostCard\";\nimport { useGetPosts, useGetPostsByCategory } from \"../../actions\";\nimport { PAGE_SIZE } from \"../../lib/vars\";\nimport IconsBtn from \"../shared/IconsBtn\";\nimport { BsGrid } from \"react-icons/bs\";\nimport { FiList } from \"react-icons/fi\";\nimport { Box, Button, Skeleton, useColorMode } from \"@chakra-ui/core\";\nimport { borderColor, color } from \"../../customTheme\";\nimport { downChevron } from \"../../lib/icons\";\nimport { GlobalContext } from \"../../context/global.context\";\nimport { IAllPosts } from \"../../interfaces/IAllPosts\";\n\nconst Previews = ({ posts }: { posts: IAllPosts[] }) => {\n  const { isListView, switchView } = useContext(GlobalContext);\n\n  const { colorMode } = useColorMode();\n\n  const initialData = posts && [posts];\n\n  const { data: paginatedPosts, size, setSize } = useGetPosts(initialData);\n  const { data } = useGetPostsByCategory(\"faith\");\n\n  if (!paginatedPosts) return \"loading\";\n\n  const isEmpty = paginatedPosts?.[0]?.length === 0;\n  const isReachingEnd =\n    isEmpty || paginatedPosts[paginatedPosts.length - 1]?.length < PAGE_SIZE;\n\n  const previews = paginatedPosts.map((el: IAllPosts[]) =>\n    el.map(({ _id, title, subtitle, slug, mainImage, publishedAt }) => (\n      <PostCard\n        key={_id}\n        title={title}\n        subtitle={subtitle}\n        slug={slug}\n        mainImage={mainImage}\n        publishedAt={publishedAt}\n      />\n    ))\n  );\n\n  const previewClass = isListView\n    ? \"md:mx-16 ip:ml-48\"\n    : \"lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12\";\n\n  return (\n    <>\n      <div className=\"view-button-container\">\n        <IconsBtn\n          whileHover={{ scale: 1.2 }}\n          firstIcon={BsGrid}\n          secondIcon={FiList}\n          toggle={switchView}\n          isToggled={isListView}\n          className=\"ease\"\n        />\n      </div>\n      <Skeleton isLoaded={paginatedPosts}>\n        <Box\n          color={color[colorMode]}\n          className={`preview-container ${previewClass}`}\n        >\n          {previews}\n        </Box>\n      </Skeleton>\n      <div className=\"preview-button-container\">\n        <Button\n          disabled={isReachingEnd}\n          size=\"lg\"\n          rounded=\"full\"\n          onClick={() => !isReachingEnd && setSize(size + 1)}\n          variant=\"outline\"\n          borderColor={borderColor[colorMode]}\n          _focus={{ outline: \"none\" }}\n        >\n          {downChevron(isReachingEnd)}\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default Previews;\n"]},"metadata":{},"sourceType":"module"}