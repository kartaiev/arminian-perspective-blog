{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/earth/WebstormProjects/arminian-perspective-blog/client/components/posts-preview/Previews.tsx\";\nimport React, { useContext } from 'react';\nimport PostCard from './PostCard';\nimport { useGetPosts, useGetPostsByCategory } from '../../actions';\nimport { PAGE_SIZE } from '../../lib/vars';\nimport IconsBtn from '../shared/IconsBtn';\nimport { BsGrid } from 'react-icons/bs';\nimport { FiList } from 'react-icons/fi';\nimport { Box, Button, Skeleton, useColorMode } from '@chakra-ui/core';\nimport { borderColor, color } from '../../customTheme';\nimport { downChevron } from '../../lib/icons';\nimport { GlobalContext } from '../../context/globalContext';\n\nconst Previews = ({\n  posts\n}) => {\n  var _paginatedPosts$, _paginatedPosts;\n\n  const {\n    isListView,\n    switchView\n  } = useContext(GlobalContext);\n  const {\n    colorMode\n  } = useColorMode();\n  const initialData = posts && [posts];\n  const {\n    data: paginatedPosts,\n    size,\n    setSize\n  } = useGetPosts(initialData);\n  const {\n    data\n  } = useGetPostsByCategory('faith');\n  if (!paginatedPosts) return 'loading';\n  const isEmpty = (paginatedPosts === null || paginatedPosts === void 0 ? void 0 : (_paginatedPosts$ = paginatedPosts[0]) === null || _paginatedPosts$ === void 0 ? void 0 : _paginatedPosts$.length) === 0;\n  const isReachingEnd = isEmpty || ((_paginatedPosts = paginatedPosts[paginatedPosts.length - 1]) === null || _paginatedPosts === void 0 ? void 0 : _paginatedPosts.length) < PAGE_SIZE;\n  const previews = paginatedPosts.map(el => el.map(({\n    _id,\n    title,\n    subtitle,\n    slug,\n    mainImage,\n    publishedAt,\n    name\n  }) => /*#__PURE__*/_jsxDEV(PostCard, {\n    title: title,\n    subtitle: subtitle,\n    slug: slug,\n    mainImage: mainImage,\n    publishedAt: publishedAt,\n    name: name\n  }, _id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 13\n  }, this)));\n  const previewClass = isListView ? 'md:mx-16 ip:ml-48' : 'lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12'; // @ts-ignore\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"view-button-container\",\n      children: /*#__PURE__*/_jsxDEV(IconsBtn, {\n        whileHover: {\n          scale: 1.2\n        },\n        firstIcon: BsGrid,\n        secondIcon: FiList,\n        toggle: switchView,\n        isToggled: isListView,\n        className: \"ease\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n      isLoaded: paginatedPosts,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        color: color[colorMode],\n        className: `preview-container ${previewClass}`,\n        children: previews\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preview-button-container\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        isDisabled: isReachingEnd,\n        size: \"lg\",\n        rounded: \"full\",\n        onClick: () => !isReachingEnd && setSize(size + 1),\n        variant: \"outline\",\n        borderColor: borderColor[colorMode],\n        _focus: {\n          outline: 'none'\n        },\n        children: downChevron(isReachingEnd)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Previews;","map":{"version":3,"sources":["/Users/earth/WebstormProjects/arminian-perspective-blog/client/components/posts-preview/Previews.tsx"],"names":["React","useContext","PostCard","useGetPosts","useGetPostsByCategory","PAGE_SIZE","IconsBtn","BsGrid","FiList","Box","Button","Skeleton","useColorMode","borderColor","color","downChevron","GlobalContext","Previews","posts","isListView","switchView","colorMode","initialData","data","paginatedPosts","size","setSize","isEmpty","length","isReachingEnd","previews","map","el","_id","title","subtitle","slug","mainImage","publishedAt","name","previewClass","scale","outline"],"mappings":"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","sourcesContent":["import React, {ReactNode, useContext} from 'react';\nimport PostCard from './PostCard';\nimport {useGetPosts, useGetPostsByCategory} from '../../actions';\nimport {PAGE_SIZE} from '../../lib/vars';\nimport IconsBtn from '../shared/IconsBtn';\nimport {BsGrid} from 'react-icons/bs';\nimport {FiList} from 'react-icons/fi';\nimport {Box, Button, Skeleton, useColorMode} from '@chakra-ui/core';\nimport {borderColor, color} from '../../customTheme';\nimport {downChevron} from '../../lib/icons';\nimport {GlobalContext} from '../../context/globalContext';\nimport {IPost} from '../../interfaces/IPost';\n\nconst Previews = ({posts}: { posts: IPost[] }): ReactNode => {\n    const {isListView, switchView} = useContext(GlobalContext);\n\n    const {colorMode} = useColorMode();\n\n    const initialData = posts && [posts];\n\n    const {data: paginatedPosts, size, setSize} = useGetPosts(initialData);\n    const {data} = useGetPostsByCategory('faith');\n\n    if (!paginatedPosts) return 'loading';\n\n    const isEmpty = paginatedPosts?.[0]?.length === 0;\n    const isReachingEnd =\n        isEmpty || paginatedPosts[paginatedPosts.length - 1]?.length < PAGE_SIZE;\n\n    const previews = paginatedPosts.map((el: IPost[]) =>\n        el.map(({_id, title, subtitle, slug, mainImage, publishedAt, name}) => (\n            <PostCard\n                key={_id}\n                title={title}\n                subtitle={subtitle}\n                slug={slug}\n                mainImage={mainImage}\n                publishedAt={publishedAt}\n                name={name}\n            />\n        ))\n    );\n\n    const previewClass = isListView\n        ? 'md:mx-16 ip:ml-48'\n        : 'lg:grid-cols-2 lg:mt-2 ip:grid-cols-3 xl:gap-12';\n\n    // @ts-ignore\n    return (\n        <>\n            <div className=\"view-button-container\">\n                <IconsBtn\n                    whileHover={{scale: 1.2}}\n                    firstIcon={BsGrid}\n                    secondIcon={FiList}\n                    toggle={switchView}\n                    isToggled={isListView}\n                    className=\"ease\"\n                />\n            </div>\n            <Skeleton isLoaded={paginatedPosts}>\n                <Box\n                    color={color[colorMode]}\n                    className={`preview-container ${previewClass}`}\n                >\n                    {previews}\n                </Box>\n            </Skeleton>\n            <div className=\"preview-button-container\">\n                <Button\n                    isDisabled={isReachingEnd}\n                    size=\"lg\"\n                    rounded=\"full\"\n                    onClick={() => !isReachingEnd && setSize(size + 1)}\n                    variant=\"outline\"\n                    borderColor={borderColor[colorMode]}\n                    _focus={{outline: 'none'}}\n                >\n                    {downChevron(isReachingEnd)}\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default Previews;\n"]},"metadata":{},"sourceType":"module"}